#!/usr/bin/env python
'''This script create the datamodel for subscriber management'''

import os
import sqlite3
import sys
import gaabo_conf

class SqliteDbOperator(object):
    '''This class provide everything to operate a sqllite base'''

    SUBSCRIBERS_CREATE = '''
    CREATE TABLE subscribers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        lastname TEXT,
        firstname TEXT,
        company TEXT,
        name_addition TEXT,
        address TEXT,
        address_addition TEXT,
        post_code INTEGER,
        city TEXT,
        email_address TEXT,
        subscriber_since_issue INTEGER,
        subscription_date DATE,
        issues_to_receive INTEGER,
        subs_beginning_issue INTEGER,
        member INTEGER,
        subscription_price REAL,
        membership_price REAL,
        hors_serie1 INTEGER,
        hors_serie2 INTEGER,
        hors_serie3 INTEGER,
        sticker_sent INTEGER,
        comment TEXT,
        bank TEXT,
        ordering_type TEXT,
        mail_sent INTEGER
    )'''


    def __init__(self):
        '''Initialize the db_directory and db_name that will be used to operate
        the db'''
        self.dir_name = gaabo_conf.db_directory
        self.db_name = gaabo_conf.db_name
        self.db_full_path = os.path.join(self.dir_name, self.db_name)

    def check_dir(self):
        '''Checks if the database directory exists. If not, create it'''
        if not os.path.isdir(self.dir_name):
            os.mkdir(self.dir_name)

    def remove_db(self):
        '''Removes a previous existing DB with the same name'''
        if os.path.isfile(self.db_full_path):
            os.remove(self.db_full_path)

    def create_db(self):
        '''Creates the database and associated tables'''
        self.remove_db()
        conn = sqlite3.connect(self.db_full_path)
        cursor = conn.cursor()
        cursor.execute(self.SUBSCRIBERS_CREATE)
        cursor.close()
        conn.close()
